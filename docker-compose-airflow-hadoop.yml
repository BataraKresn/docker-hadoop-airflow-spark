x-airflow-common: 
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-hadoop-base:3.3.6}
  environment:
    &airflow-common-env
    - AIRFLOW_HOME=/home/airflow
    - AIRFLOW__CORE_dags_folder=/home/airflow/dags
    - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow
    - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
    - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq3LdUUO7F2Z95cvFFx16hU8jTeR1ASM=
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - RATELIMIT_STORAGE_URL=redis://redis:6379
    - TZ=Asia/Jakarta
  volumes:
    - /bigdata/airflow/output:/home/airflow/output
    - ./dags:/home/airflow/dags
    - /bigdata/airflow/plugins:/home/airflow/plugins
    - /bigdata/airflow/logs:/home/airflow/logs
    - ./data/:/hadoop-data/input
    - ./map_reduce/:/hadoop-data/map_reduce
x-airflow-common-depends-on: 
  &airflow-common-depends-on
  postgres:
    condition: service_healthy
  redis:
    condition: service_healthy

services:
  namenode:
    build: ./namenode
    container_name: namenode
    volumes:
      - /bigdata/hadoop_namenode:/hadoop/dfs/name
      - ./data/:/hadoop-data/input
      - ./map_reduce/:/hadoop-data/map_reduce
      - ./requirements.txt:/hadoop-data/requirements.txt
    environment:
      - CLUSTER_NAME=developments
    env_file:
      - ./hadoop.env
    ports:
      - 9870:9870
    networks:
      - hadoop_network

  resourcemanager:
    build: ./resourcemanager
    container_name: resourcemanager
    restart: on-failure
    depends_on:
      - namenode
      - datanode1
      - datanode2
      - datanode3
    env_file:
      - ./hadoop.env
    ports:
      - 8089:8088
    networks:
      - hadoop_network

  historyserver:
    build: ./historyserver
    container_name: historyserver
    depends_on:
      - namenode
      - datanode1
      - datanode2
    volumes:
      - /bigdata/hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
    ports:
      - 8188:8188
    networks:
      - hadoop_network

  nodemanager1:
    build: ./nodemanager
    container_name: nodemanager1
    depends_on:
      - resourcemanager
      - namenode
      - datanode1
      - datanode2
    env_file:
      - ./hadoop.env
    volumes:
      - /bigdata/hadoop_namenager_local:/hadoop/dfs/local
      - /bigdata/hadoop_namenager_logs:/hadoop/dfs/logs
    ports:
      - 8042:8042
    networks:
      - hadoop_network

  # nodemanager2:
  #   build: ./nodemanager
  #   container_name: nodemanager2
  #   depends_on:
  #     - resourcemanager
  #     - namenode
  #     - datanode1
  #     - datanode2
  #   env_file:
  #     - ./hadoop.env
  #   volumes:
  #     - /bigdata/hadoop_namenager_local:/hadoop/dfs/local
  #     - /bigdata/hadoop_namenager_logs:/hadoop/dfs/logs
  #   ports:
  #     - 8043:8043
  #   networks:
  #     - hadoop_network

  datanode1:
    build: ./datanode
    container_name: datanode1
    depends_on:
      - namenode
    volumes:
      - /bigdata/hadoop_datanode1:/hadoop/dfs/data
    env_file:
      - ./hadoop.env
    networks:
      - hadoop_network

  datanode2:
    build: ./datanode
    container_name: datanode2
    depends_on:
      - namenode
    volumes:
      - /bigdata/hadoop_datanode2:/hadoop/dfs/data
    env_file:
      - ./hadoop.env
    networks:
      - hadoop_network

  datanode3:
    build: ./datanode
    container_name: datanode3
    depends_on:
      - namenode
    volumes:
      - /bigdata/hadoop_datanode3:/hadoop/dfs/data
    env_file:
      - ./hadoop.env
    networks:
      - hadoop_network

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    volumes:
    - /bigdata/postgres/data:/var/lib/postgresql/data   # Mount PostgreSQL data volume
    - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    networks:
      - hadoop_network
    
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=bigdata0124@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=3J1}/Ux82Y5;
    ports:
      - "5050:80" # Expose pgAdmin port for external access
    volumes:
      - /bigdata/postgres/pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - hadoop_network
  
  redis:
    image: redis:alpine
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 5
    ports:
      - "6379:6379"
    volumes:
      - /bigdata/redis/data:/data
    restart: always
    networks:
      - hadoop_network

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - airflow db migrate && airflow users create --role Admin --username airflow --password airflow --email airflow@airflow.com --firstname airflow --lastname airflow
    restart: on-failure
    networks:
      - hadoop_network

  airflow-webserver:
    <<: *airflow-common
    command: airflow webserver
    ports:
      - 8080:8080
    container_name: airflow_webserver
    depends_on: 
      - postgres
      - redis
      - airflow-init
    restart: always
    networks:
      - hadoop_network
  
  airflow-scheduler:
    <<: *airflow-common
    command: airflow scheduler
    container_name: airflow_scheduler
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    depends_on: 
      - postgres
      - redis
      - airflow-init
    restart: always
    networks:
      - hadoop_network

airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on: 
      - postgres
      - redis
      - airflow-init
    networks:
      - hadoop_network

airflow-flower:
    <<: *airflow-common
    container_name: airflow_flower
    command: airflow flower
    ports:
      - "5555:5555"
    depends_on: 
      - postgres
      - redis
      - airflow-init
    restart: always
    networks:
      - hadoop_network

# volumes:
#   hadoop_namenode:
#   hadoop_datanode1:
#   hadoop_datanode2:
#   hadoop_datanode3:
#   hadoop_historyserver:

# volumes:
#   airflow_output:
#           driver: local-persist
#           driver_opts:
#                mountpoint: /bigdata/airflow/output
#   airflow_plugins:
#           driver: local-persist
#           driver_opts:
#                mountpoint: /bigdata/airflow/plugins
#   hadoop_namenode:
#           driver: local-persist
#           driver_opts:
#                mountpoint: /bigdata/hadoop_namenode
#   hadoop_datanode1:
#           driver: local-persist
#           driver_opts:
#                mountpoint: /bigdata/hadoop_datanode1
#   hadoop_datanode2:
#           driver: local-persist
#           driver_opts:
#                mountpoint: /bigdata/hadoop_datanode2
#   hadoop_datanode3:
#           driver: local-persist
#           driver_opts:
#                mountpoint: /bigdata/hadoop_datanode3
#   hadoop_historyserver:
#           driver: local-persist
#           driver_opts:
#                mountpoint: /bigdata/hadoop_historyserver
#   postgres_data:
#           driver: local-persist
#           driver_opts:
#                mountpoint: /bigdata/postgres/data
#   pgadmin_data:
#           driver: local-persist
#           driver_opts:
#                mountpoint: /bigdata/postgres/pgadmin_data
#   redis_data:
#           driver: local-persist
#           driver_opts:
#                mountpoint: /bigdata/redis/data

networks:
  hadoop_network:
    name: hadoop_network
    external: true